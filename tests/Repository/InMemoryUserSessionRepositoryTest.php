<?php
/**
 * Created by PhpStorm.
 * User: christian
 * Date: 21/03/16
 * Time: 21:28
 */

namespace User\Repository;


use Mockery;
use Veloci\User\Factory\UserSessionFactory;
use Veloci\User\Repository\InMemoryUserSessionRepository;
use Veloci\User\Repository\UserRepository;
use Veloci\User\Repository\UserSessionRepository;
use Veloci\User\User;
use Veloci\User\UserSession;
use Veloci\User\UserToken;

class InMemoryUserSessionRepositoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var UserSessionFactory|Mockery\MockInterface
     */
    private $userSessionFactory;


    /**
     * @var UserSessionRepository
     */
    private $repository;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->userSessionFactory = $this->mockUserSessionFactory();
        $this->repository         = new InMemoryUserSessionRepository($this->userSessionFactory);
    }

    /**
     * @test
     */
    public function shouldCreateTheUser()
    {
        $this->userSessionFactory->shouldReceive('create');

        $user      = $this->createUser();
        $userToken = $this->createUserToken();

        $this->repository->create($user, $userToken);
    }

    /**
     * @test
     */
    public function shouldWork()
    {

    }

    /**
     * @return Mockery\MockInterface | UserSessionFactory
     */
    private function mockUserSessionFactory():UserSessionFactory
    {
        $mock = Mockery::mock(UserSessionFactory::class);

        return $mock;
    }

    /**
     * @return Mockery\MockInterface | User
     */
    private function createUser():User
    {
        $mock = Mockery::mock(User::class);

        return $mock;
    }

    /**
     * @return Mockery\MockInterface | UserToken
     */
    private function createUserToken():UserToken
    {
        $mock = Mockery::mock(UserToken::class);

        return $mock;
    }
}
